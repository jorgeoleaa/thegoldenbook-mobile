/* tslint:disable */
/* eslint-disable */
/**
 * The Golden Book API
 * API for a book-selling business
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@thegoldenbook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
    AuthorToJSONTyped,
} from './Author';
import type { LiteraryGenre } from './LiteraryGenre';
import {
    LiteraryGenreFromJSON,
    LiteraryGenreFromJSONTyped,
    LiteraryGenreToJSON,
    LiteraryGenreToJSONTyped,
} from './LiteraryGenre';
import type { Subject } from './Subject';
import {
    SubjectFromJSON,
    SubjectFromJSONTyped,
    SubjectToJSON,
    SubjectToJSONTyped,
} from './Subject';

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    isbn?: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    synopsis?: string;
    /**
     * 
     * @type {Date}
     * @memberof Book
     */
    publicationDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    averageRating?: number;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    stock?: number;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    readingAgeGropuId?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    readingAgeGroupName?: string;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    languageId?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    languageName?: string;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    formatId?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    formatName?: string;
    /**
     * 
     * @type {Array<Author>}
     * @memberof Book
     */
    authors?: Array<Author>;
    /**
     * 
     * @type {Array<Subject>}
     * @memberof Book
     */
    subjects?: Array<Subject>;
    /**
     * 
     * @type {Array<LiteraryGenre>}
     * @memberof Book
     */
    literaryGenres?: Array<LiteraryGenre>;
}

/**
 * Check if a given object implements the Book interface.
 */
export function instanceOfBook(value: object): value is Book {
    return true;
}

export function BookFromJSON(json: any): Book {
    return BookFromJSONTyped(json, false);
}

export function BookFromJSONTyped(json: any, ignoreDiscriminator: boolean): Book {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'isbn': json['isbn'] == null ? undefined : json['isbn'],
        'title': json['title'] == null ? undefined : json['title'],
        'synopsis': json['synopsis'] == null ? undefined : json['synopsis'],
        'publicationDate': json['publicationDate'] == null ? undefined : (new Date(json['publicationDate'])),
        'averageRating': json['averageRating'] == null ? undefined : json['averageRating'],
        'stock': json['stock'] == null ? undefined : json['stock'],
        'price': json['price'] == null ? undefined : json['price'],
        'readingAgeGropuId': json['readingAgeGropuId'] == null ? undefined : json['readingAgeGropuId'],
        'readingAgeGroupName': json['readingAgeGroupName'] == null ? undefined : json['readingAgeGroupName'],
        'languageId': json['languageId'] == null ? undefined : json['languageId'],
        'languageName': json['languageName'] == null ? undefined : json['languageName'],
        'formatId': json['formatId'] == null ? undefined : json['formatId'],
        'formatName': json['formatName'] == null ? undefined : json['formatName'],
        'authors': json['authors'] == null ? undefined : ((json['authors'] as Array<any>).map(AuthorFromJSON)),
        'subjects': json['subjects'] == null ? undefined : ((json['subjects'] as Array<any>).map(SubjectFromJSON)),
        'literaryGenres': json['literaryGenres'] == null ? undefined : ((json['literaryGenres'] as Array<any>).map(LiteraryGenreFromJSON)),
    };
}

export function BookToJSON(json: any): Book {
    return BookToJSONTyped(json, false);
}

export function BookToJSONTyped(value?: Book | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'isbn': value['isbn'],
        'title': value['title'],
        'synopsis': value['synopsis'],
        'publicationDate': value['publicationDate'] == null ? undefined : ((value['publicationDate']).toISOString()),
        'averageRating': value['averageRating'],
        'stock': value['stock'],
        'price': value['price'],
        'readingAgeGropuId': value['readingAgeGropuId'],
        'readingAgeGroupName': value['readingAgeGroupName'],
        'languageId': value['languageId'],
        'languageName': value['languageName'],
        'formatId': value['formatId'],
        'formatName': value['formatName'],
        'authors': value['authors'] == null ? undefined : ((value['authors'] as Array<any>).map(AuthorToJSON)),
        'subjects': value['subjects'] == null ? undefined : ((value['subjects'] as Array<any>).map(SubjectToJSON)),
        'literaryGenres': value['literaryGenres'] == null ? undefined : ((value['literaryGenres'] as Array<any>).map(LiteraryGenreToJSON)),
    };
}

