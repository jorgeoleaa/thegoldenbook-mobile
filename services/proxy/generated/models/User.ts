/* tslint:disable */
/* eslint-disable */
/**
 * The Golden Book API
 * API for a book-selling business
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@thegoldenbook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    secondLastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    nationalId?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    oauthToken?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    desactivatedAt?: Date;
    /**
     * 
     * @type {Array<Address>}
     * @memberof User
     */
    addresses?: Array<Address>;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'nickname': json['nickname'] == null ? undefined : json['nickname'],
        'name': json['name'] == null ? undefined : json['name'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'secondLastName': json['secondLastName'] == null ? undefined : json['secondLastName'],
        'nationalId': json['nationalId'] == null ? undefined : json['nationalId'],
        'email': json['email'] == null ? undefined : json['email'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'password': json['password'] == null ? undefined : json['password'],
        'oauthToken': json['oauthToken'] == null ? undefined : json['oauthToken'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'desactivatedAt': json['desactivatedAt'] == null ? undefined : (new Date(json['desactivatedAt'])),
        'addresses': json['addresses'] == null ? undefined : ((json['addresses'] as Array<any>).map(AddressFromJSON)),
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'nickname': value['nickname'],
        'name': value['name'],
        'lastName': value['lastName'],
        'secondLastName': value['secondLastName'],
        'nationalId': value['nationalId'],
        'email': value['email'],
        'phoneNumber': value['phoneNumber'],
        'password': value['password'],
        'oauthToken': value['oauthToken'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'desactivatedAt': value['desactivatedAt'] == null ? undefined : ((value['desactivatedAt']).toISOString()),
        'addresses': value['addresses'] == null ? undefined : ((value['addresses'] as Array<any>).map(AddressToJSON)),
    };
}

