/* tslint:disable */
/* eslint-disable */
/**
 * The Golden Book API
 * API for a book-selling business
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@thegoldenbook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
  Format,
  Language,
  LiteraryGenre,
  Order,
  ReadingAgeGroup,
  Review,
  User,
  UserCredentials,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
    FormatFromJSON,
    FormatToJSON,
    LanguageFromJSON,
    LanguageToJSON,
    LiteraryGenreFromJSON,
    LiteraryGenreToJSON,
    OrderFromJSON,
    OrderToJSON,
    ReadingAgeGroupFromJSON,
    ReadingAgeGroupToJSON,
    ReviewFromJSON,
    ReviewToJSON,
    UserFromJSON,
    UserToJSON,
    UserCredentialsFromJSON,
    UserCredentialsToJSON,
} from '../models/index';

export interface AuthenticateUserRequest {
    locale: string;
    userCredentials?: UserCredentials;
}

export interface CreateOrderRequest {
    locale: string;
    order?: Order;
}

export interface CreateReviewRequest {
    locale: string;
    review?: Review;
}

export interface DeleteOrderRequest {
    id?: number;
}

export interface DeleteReviewRequest {
    bookId?: number;
    userId?: number;
}

export interface DeleteUserRequest {
    locale: string;
    id?: number;
}

export interface FindBooksByCriteriaRequest {
    id?: number;
    isbn?: string;
    title?: string;
    minPrice?: number;
    maxPrice?: number;
    minUnits?: number;
    maxUnits?: number;
    startDate?: Date;
    endDate?: Date;
    readingAgeGroupId?: number;
    languageId?: number;
    formatId?: number;
    locale?: string;
}

export interface FindFormatsByLocaleRequest {
    locale?: string;
}

export interface FindLanguagesByLocaleRequest {
    locale?: string;
}

export interface FindLiteraryGenresByLocaleRequest {
    locale?: string;
}

export interface FindOrdersByCriteriaRequest {
    id?: number;
    startDate?: string;
    endDate?: string;
    minPrice?: number;
    maxPrice?: number;
    userId?: number;
    orderStatusId?: number;
}

export interface FindReadingAgeGroupsByLocaleRequest {
    locale?: string;
}

export interface FindReviewsByBookRequest {
    bookId?: number;
    locale?: string;
}

export interface GetExternalGrammarRequest {
    path: string;
}

export interface GetImageByBookIdRequest {
    bookId: number;
    locale?: string;
}

export interface RegisterUserRequest {
    locale: string;
    user?: User;
}

export interface UpdateOrderRequest {
    order?: Order;
}

export interface UpdateUserRequest {
    locale: string;
    user?: User;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Authenticates a user by entering their email and password
     * User authentication
     */
    async authenticateUserRaw(requestParameters: AuthenticateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling authenticateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/{locale}/auth`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCredentialsToJSON(requestParameters['userCredentials']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Authenticates a user by entering their email and password
     * User authentication
     */
    async authenticateUser(requestParameters: AuthenticateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authenticateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an order by entering all its data
     * Create an order
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling createOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/order/{locale}/create`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters['order']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Creates an order by entering all its data
     * Create an order
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a review for a book associated with a customer.
     * Create a review
     */
    async createReviewRaw(requestParameters: CreateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling createReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/review/{locale}`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewToJSON(requestParameters['review']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a review for a book associated with a customer.
     * Create a review
     */
    async createReview(requestParameters: CreateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createReviewRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an order based on the provided identifier
     * Delete an order
     */
    async deleteOrderRaw(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/order/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an order based on the provided identifier
     * Delete an order
     */
    async deleteOrder(requestParameters: DeleteOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a review by specifying the associated book ID and the ID of the customer who made it.
     * Delete a review
     */
    async deleteReviewRaw(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['bookId'] != null) {
            queryParameters['bookId'] = requestParameters['bookId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a review by specifying the associated book ID and the ID of the customer who made it.
     * Delete a review
     */
    async deleteReview(requestParameters: DeleteReviewRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReviewRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a user based on the ID they have in the database
     * User deletion
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{locale}/delete`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a user based on the ID they have in the database
     * User deletion
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of books based on the provided criteria
     * Search for books by criteria
     */
    async findBooksByCriteriaRaw(requestParameters: FindBooksByCriteriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isbn'] != null) {
            queryParameters['isbn'] = requestParameters['isbn'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['minPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['maxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['minUnits'] != null) {
            queryParameters['minUnits'] = requestParameters['minUnits'];
        }

        if (requestParameters['maxUnits'] != null) {
            queryParameters['maxUnits'] = requestParameters['maxUnits'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['readingAgeGroupId'] != null) {
            queryParameters['readingAgeGroupId'] = requestParameters['readingAgeGroupId'];
        }

        if (requestParameters['languageId'] != null) {
            queryParameters['languageId'] = requestParameters['languageId'];
        }

        if (requestParameters['formatId'] != null) {
            queryParameters['formatId'] = requestParameters['formatId'];
        }

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/book`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     * Retrieves a list of books based on the provided criteria
     * Search for books by criteria
     */
    async findBooksByCriteria(requestParameters: FindBooksByCriteriaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.findBooksByCriteriaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of formats in the language of the provided locale
     * Search for formats
     */
    async findFormatsByLocaleRaw(requestParameters: FindFormatsByLocaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Format>>> {
        const queryParameters: any = {};

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/format`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormatFromJSON));
    }

    /**
     * Retrieves a list of formats in the language of the provided locale
     * Search for formats
     */
    async findFormatsByLocale(requestParameters: FindFormatsByLocaleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Format>> {
        const response = await this.findFormatsByLocaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of languages in the language of the provided locale
     * Language search
     */
    async findLanguagesByLocaleRaw(requestParameters: FindLanguagesByLocaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Language>>> {
        const queryParameters: any = {};

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/language`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LanguageFromJSON));
    }

    /**
     * Retrieves a list of languages in the language of the provided locale
     * Language search
     */
    async findLanguagesByLocale(requestParameters: FindLanguagesByLocaleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Language>> {
        const response = await this.findLanguagesByLocaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of literary genres in the language of the provided locale
     * Search for literary genres
     */
    async findLiteraryGenresByLocaleRaw(requestParameters: FindLiteraryGenresByLocaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LiteraryGenre>>> {
        const queryParameters: any = {};

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/genre`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LiteraryGenreFromJSON));
    }

    /**
     * Retrieves a list of literary genres in the language of the provided locale
     * Search for literary genres
     */
    async findLiteraryGenresByLocale(requestParameters: FindLiteraryGenresByLocaleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LiteraryGenre>> {
        const response = await this.findLiteraryGenresByLocaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search orders based on several entered parameters
     * Search orders by criteria
     */
    async findOrdersByCriteriaRaw(requestParameters: FindOrdersByCriteriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['minPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['maxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['orderStatusId'] != null) {
            queryParameters['orderStatusId'] = requestParameters['orderStatusId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     * Search orders based on several entered parameters
     * Search orders by criteria
     */
    async findOrdersByCriteria(requestParameters: FindOrdersByCriteriaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>> {
        const response = await this.findOrdersByCriteriaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of reading age groups in the language of the provided locale
     * Search for book reading age groups
     */
    async findReadingAgeGroupsByLocaleRaw(requestParameters: FindReadingAgeGroupsByLocaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReadingAgeGroup>>> {
        const queryParameters: any = {};

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/age`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReadingAgeGroupFromJSON));
    }

    /**
     * Retrieves a list of reading age groups in the language of the provided locale
     * Search for book reading age groups
     */
    async findReadingAgeGroupsByLocale(requestParameters: FindReadingAgeGroupsByLocaleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReadingAgeGroup>> {
        const response = await this.findReadingAgeGroupsByLocaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for all reviews belonging to the book with the provided ID
     * Search book reviews
     */
    async findReviewsByBookRaw(requestParameters: FindReviewsByBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Review>>> {
        const queryParameters: any = {};

        if (requestParameters['bookId'] != null) {
            queryParameters['bookId'] = requestParameters['bookId'];
        }

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewFromJSON));
    }

    /**
     * Searches for all reviews belonging to the book with the provided ID
     * Search book reviews
     */
    async findReviewsByBook(requestParameters: FindReviewsByBookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Review>> {
        const response = await this.findReviewsByBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExternalGrammarRaw(requestParameters: GetExternalGrammarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling getExternalGrammar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/application.wadl/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getExternalGrammar(requestParameters: GetExternalGrammarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getExternalGrammarRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an image associated with a book in PNG or JPEG format.
     * Retrieve an image of a book
     */
    async getImageByBookIdRaw(requestParameters: GetImageByBookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getImageByBookId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/image/{bookId}/image`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns an image associated with a book in PNG or JPEG format.
     * Retrieve an image of a book
     */
    async getImageByBookId(requestParameters: GetImageByBookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getImageByBookIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWadlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/application.wadl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getWadl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getWadlRaw(initOverrides);
    }

    /**
     * Registers a user by entering all their details
     * User registration
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling registerUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/{locale}/register`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Registers a user by entering all their details
     * User registration
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates all data related to the order
     * Update an order
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/order/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters['order']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates all data related to the order
     * Update an order
     */
    async updateOrder(requestParameters: UpdateOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a user by entering all their data
     * Update a user
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/{locale}/update`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Updates a user by entering all their data
     * Update a user
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
